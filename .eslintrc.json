{
	"env": {
		"browser": true,
		"commonjs": true,
		"es2020": true
	},
	"ignorePatterns": [
		"bin", // Don't parse the output found in any bin folder
		"output",
		"node_modules"
	],
	"extends": [
		"eslint-config-airbnb-base", // npm i eslint-config-airbnb-base
		"plugin:@typescript-eslint/recommended",
		"plugin:dprint-integration/disable-conflict"
	],
	"parser": "@typescript-eslint/parser",
	"plugins": [
		"@typescript-eslint", // npm i @typescript-eslint/parser @typescript-eslint/eslint-plugin
		"dprint-integration" // npm i eslint-plugin-dprint-integration
	],
	"parserOptions": {
		"ecmaVersion": 2020,
		"sourceType": "module",
		"project": "./tsconfig.json" // Or possibly tsconfig.base.json for monorepos
	},
	"settings": {
		"import/resolver": {
			"node": {
				"extensions": [ // Affects import * as xyz from './xyz'
					".js",
					".ts",
					".tsx",
					".test.ts"
				]
			}
		}
	},
	"rules": {
		"dprint-integration/dprint": [
			"error",
			{
				// Note! If this changes, vscode won't pick that up.
				// Reload window to activate!
				"useDprintJson": "./dprint.json"
			},
			{
				// Plugin specific settings (if not using dprint.json)
			}
		],
		// ***************************************************
		// * Qoutes / Strings / Concaternations
		// ***************************************************
		"prefer-template": "error", // Use template strings instead of string concatenation
		"no-useless-escape": "warn", // Will warn of for example this "\'"
		"no-useless-concat": "warn", // Will warn for example for var a = '1' + '0';
		// ******************************************
		// * Variables
		// ******************************************
		"prefer-destructuring": "off",
		"@typescript-eslint/no-unused-vars": [
			"warn",
			{
				"vars": "all",
				"args": "after-used",
				"ignoreRestSiblings": false,
				"argsIgnorePattern": "^_", // Function args starting with _ is ignored
				"varsIgnorePattern": "^_" // Any variable starting with _ is ignored
			}
		],
		"no-param-reassign": "error", // Disallow function input parameters to be modified
		"prefer-const": "error",
		"camelcase": [ //  "const myVariable = 1;"
			"warn"
		],
		"new-cap": [ //  "new Foo()"
			"warn"
		],
		"no-shadow": "off", // Note: you must disable the base rule as it can report incorrect errors
		"@typescript-eslint/no-shadow": [
			"error",
			{
				"hoist": "functions"
			}
		],
		"one-var": "warn", // Require variable declarations to be on separate lines
		"no-use-before-define": "off",
		"@typescript-eslint/no-use-before-define": [
			"error",
			{
				"functions": false,
				"classes": false,
				"variables": true,
				"allowNamedExports": false
			}
		],
		"no-underscore-dangle": [
			"warn",
			{
				"allow": [
					"_id",
					"_mutex"
				]
			}
		],
		"no-undef-init": "off", // Allow "let a = undefined"
		"vars-on-top": "off",
		// ******************************************
		// * Comparisations
		// ******************************************
		"eqeqeq": "error",
		"valid-typeof": "error",
		// ***************************************************
		// * Switch
		// ***************************************************
		"no-case-declarations": "off", // Allow inline code,
		"default-case": "off", // Allow "switch" statement without default
		// ******************************************
		// * Functions
		// ******************************************
		"@typescript-eslint/explicit-module-boundary-types": [
			"warn",
			{
				"allowArgumentsExplicitlyTypedAsAny": true // Allow any as return type
			}
		],
		"no-useless-return": "warn",
		"no-empty-function": "error", // Need to write code :)
		"prefer-arrow-callback": "off",
		"func-names": "off", // turns of async _function_ (req: Express.Request, res: Express.Response) check
		"consistent-return": "off",
		"no-restricted-syntax": "off",
		// ***************************************************
		// * Classes
		// ***************************************************
		"max-classes-per-file": "off",
		// ******************************************
		// * Import and export
		// ******************************************
		"import/extensions": [
			"warn",
			"never"
		],
		"import/prefer-default-export": "off",
		"import/newline-after-import": "off", // Handled by import/order
		"import/no-extraneous-dependencies": "off",
		"import/no-unresolved": [
			"warn",
			{
				"commonjs": false,
				"amd": false
			}
		],
		// ******************************************
		// * Async/Await/Promise/yield
		// ******************************************
		"no-return-await": "off", // Allow "Redundant use of `await` on a return value."
		"require-await": "warn", // Async function 'foo' has no 'await' expression.
		"require-yield": "warn",
		"prefer-promise-reject-errors": "error",
		"handle-callback-err": "error",
		"@typescript-eslint/await-thenable": "warn", // Disallow awaiting a value that is not a Thenable
		"no-promise-executor-return": "off", // https://eslint.org/docs/latest/rules/no-promise-executor-return
		// ******************************************
		// * Loops
		// ******************************************
		"no-await-in-loop": "off", // allow for (const foo of bar) { let y = await }
		"no-continue": "off",
		"guard-for-in": "off",
		// ******************************************
		// * If & ternaries ? yes : no
		// ******************************************
		"no-lonely-if": "off",
		"no-unneeded-ternary": "warn",
		"no-nested-ternary": "off",
		"no-else-return": "off",
		// ***************************************************
		// * This... and this...
		// ***************************************************
		"@typescript-eslint/no-this-alias": "warn",
		"class-methods-use-this": "off", // Allow class methods to exist without being suggested to turn them into a static method
		// ******************************************
		// * Typescript
		// ******************************************
		"@typescript-eslint/ban-ts-comment": [
			"warn",
			{
				"ts-expect-error": "allow-with-description",
				"ts-ignore": "allow-with-description",
				"ts-nocheck": "allow-with-description",
				"ts-check": "allow-with-description"
			}
		],
		// ******************************************
		// * Types
		// ******************************************
		"@typescript-eslint/ban-types": [
			"warn",
			{
				"types": {
					"String": {
						"message": "Use string instead of String",
						"fixWith": "string"
					},
					"Object": {
						"message": "Use object instead of Object",
						"fixWith": "object"
					},
					"{}": {
						"message": "Don't use {}, probably replace with 'undefined'",
						"fixWith": "undefined"
					}
				}
			}
		],
		"@typescript-eslint/no-explicit-any": [
			"warn",
			{
				"fixToUnknown": false,
				"ignoreRestArgs": true
			}
		],
		"@typescript-eslint/explicit-function-return-type": [
			"warn",
			{
				"allowExpressions": false,
				"allowTypedFunctionExpressions": true,
				"allowHigherOrderFunctions": false,
				"allowDirectConstAssertionInArrowFunctions": false,
				"allowConciseArrowFunctionExpressionsStartingWithVoid": false
			}
		],
		// ******************************************
		// * Mathematical
		// ******************************************
		"radix": "off",
		"no-plusplus": "off",
		"no-bitwise": "off",
		"no-mixed-operators": "off",
		// ***************************************************
		// * Debugging
		// ***************************************************
		"no-console": "off",
		"no-debugger": "warn",
		// ******************************************
		// * Misc
		// ******************************************
		"no-unreachable": "warn", // Unreachable code
		"@typescript-eslint/promise-function-async": "error"
	}
}